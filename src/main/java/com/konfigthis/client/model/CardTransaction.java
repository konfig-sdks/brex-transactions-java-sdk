/*
 * Transactions API
 *  The transactions API lets you view your transactions, accounts, and statements. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CardTransactionMerchant;
import com.konfigthis.client.model.CardTransactionType;
import com.konfigthis.client.model.Money;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CardTransaction
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CardTransaction {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CARD_ID = "card_id";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  private String cardId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Money amount;

  public static final String SERIALIZED_NAME_INITIATED_AT_DATE = "initiated_at_date";
  @SerializedName(SERIALIZED_NAME_INITIATED_AT_DATE)
  private LocalDate initiatedAtDate;

  public static final String SERIALIZED_NAME_POSTED_AT_DATE = "posted_at_date";
  @SerializedName(SERIALIZED_NAME_POSTED_AT_DATE)
  private LocalDate postedAtDate;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private CardTransactionType type;

  public static final String SERIALIZED_NAME_MERCHANT = "merchant";
  @SerializedName(SERIALIZED_NAME_MERCHANT)
  private CardTransactionMerchant merchant;

  public static final String SERIALIZED_NAME_CARD_METADATA = "card_metadata";
  @SerializedName(SERIALIZED_NAME_CARD_METADATA)
  private Map<String, String> cardMetadata = null;

  public static final String SERIALIZED_NAME_EXPENSE_ID = "expense_id";
  @SerializedName(SERIALIZED_NAME_EXPENSE_ID)
  private String expenseId;

  public CardTransaction() {
  }

  public CardTransaction description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description of the transaction
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Description of the transaction")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public CardTransaction id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public CardTransaction cardId(String cardId) {
    
    
    
    
    this.cardId = cardId;
    return this;
  }

   /**
   * ID of the card used for the transaction. Null when type is REWARDS_CREDIT or COLLECTION.
   * @return cardId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ID of the card used for the transaction. Null when type is REWARDS_CREDIT or COLLECTION.")

  public String getCardId() {
    return cardId;
  }


  public void setCardId(String cardId) {
    
    
    
    this.cardId = cardId;
  }


  public CardTransaction amount(Money amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Money getAmount() {
    return amount;
  }


  public void setAmount(Money amount) {
    
    
    
    this.amount = amount;
  }


  public CardTransaction initiatedAtDate(LocalDate initiatedAtDate) {
    
    
    
    
    this.initiatedAtDate = initiatedAtDate;
    return this;
  }

   /**
   * ISO 8601 date string
   * @return initiatedAtDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "ISO 8601 date string")

  public LocalDate getInitiatedAtDate() {
    return initiatedAtDate;
  }


  public void setInitiatedAtDate(LocalDate initiatedAtDate) {
    
    
    
    this.initiatedAtDate = initiatedAtDate;
  }


  public CardTransaction postedAtDate(LocalDate postedAtDate) {
    
    
    
    
    this.postedAtDate = postedAtDate;
    return this;
  }

   /**
   * ISO 8601 date string
   * @return postedAtDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "ISO 8601 date string")

  public LocalDate getPostedAtDate() {
    return postedAtDate;
  }


  public void setPostedAtDate(LocalDate postedAtDate) {
    
    
    
    this.postedAtDate = postedAtDate;
  }


  public CardTransaction type(CardTransactionType type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CardTransactionType getType() {
    return type;
  }


  public void setType(CardTransactionType type) {
    
    
    
    this.type = type;
  }


  public CardTransaction merchant(CardTransactionMerchant merchant) {
    
    
    
    
    this.merchant = merchant;
    return this;
  }

   /**
   * Get merchant
   * @return merchant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CardTransactionMerchant getMerchant() {
    return merchant;
  }


  public void setMerchant(CardTransactionMerchant merchant) {
    
    
    
    this.merchant = merchant;
  }


  public CardTransaction cardMetadata(Map<String, String> cardMetadata) {
    
    
    
    
    this.cardMetadata = cardMetadata;
    return this;
  }

  public CardTransaction putCardMetadataItem(String key, String cardMetadataItem) {
    if (this.cardMetadata == null) {
      this.cardMetadata = new HashMap<>();
    }
    this.cardMetadata.put(key, cardMetadataItem);
    return this;
  }

   /**
   *  Set of key value pairs associated with this object. Please do not store any personally identifiable or sensitive information here. Limitations: maximum of 50 keys, keys cannot exceed 40 characters, values cannot exceed 500 characters.  
   * @return cardMetadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " Set of key value pairs associated with this object. Please do not store any personally identifiable or sensitive information here. Limitations: maximum of 50 keys, keys cannot exceed 40 characters, values cannot exceed 500 characters.  ")

  public Map<String, String> getCardMetadata() {
    return cardMetadata;
  }


  public void setCardMetadata(Map<String, String> cardMetadata) {
    
    
    
    this.cardMetadata = cardMetadata;
  }


  public CardTransaction expenseId(String expenseId) {
    
    
    
    
    this.expenseId = expenseId;
    return this;
  }

   /**
   * The expense ID related to the card transaction.
   * @return expenseId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The expense ID related to the card transaction.")

  public String getExpenseId() {
    return expenseId;
  }


  public void setExpenseId(String expenseId) {
    
    
    
    this.expenseId = expenseId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CardTransaction instance itself
   */
  public CardTransaction putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardTransaction cardTransaction = (CardTransaction) o;
    return Objects.equals(this.description, cardTransaction.description) &&
        Objects.equals(this.id, cardTransaction.id) &&
        Objects.equals(this.cardId, cardTransaction.cardId) &&
        Objects.equals(this.amount, cardTransaction.amount) &&
        Objects.equals(this.initiatedAtDate, cardTransaction.initiatedAtDate) &&
        Objects.equals(this.postedAtDate, cardTransaction.postedAtDate) &&
        Objects.equals(this.type, cardTransaction.type) &&
        Objects.equals(this.merchant, cardTransaction.merchant) &&
        Objects.equals(this.cardMetadata, cardTransaction.cardMetadata) &&
        Objects.equals(this.expenseId, cardTransaction.expenseId)&&
        Objects.equals(this.additionalProperties, cardTransaction.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, cardId, amount, initiatedAtDate, postedAtDate, type, merchant, cardMetadata, expenseId, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardTransaction {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    initiatedAtDate: ").append(toIndentedString(initiatedAtDate)).append("\n");
    sb.append("    postedAtDate: ").append(toIndentedString(postedAtDate)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    merchant: ").append(toIndentedString(merchant)).append("\n");
    sb.append("    cardMetadata: ").append(toIndentedString(cardMetadata)).append("\n");
    sb.append("    expenseId: ").append(toIndentedString(expenseId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("card_id");
    openapiFields.add("amount");
    openapiFields.add("initiated_at_date");
    openapiFields.add("posted_at_date");
    openapiFields.add("type");
    openapiFields.add("merchant");
    openapiFields.add("card_metadata");
    openapiFields.add("expense_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("initiated_at_date");
    openapiRequiredFields.add("posted_at_date");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CardTransaction
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CardTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardTransaction is not found in the empty JSON string", CardTransaction.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CardTransaction.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("card_id").isJsonNull() && (jsonObj.get("card_id") != null && !jsonObj.get("card_id").isJsonNull()) && !jsonObj.get("card_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_id").toString()));
      }
      // validate the required field `amount`
      Money.validateJsonObject(jsonObj.getAsJsonObject("amount"));
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        CardTransactionType.validateJsonObject(jsonObj.getAsJsonObject("type"));
      }
      // validate the optional field `merchant`
      if (jsonObj.get("merchant") != null && !jsonObj.get("merchant").isJsonNull()) {
        CardTransactionMerchant.validateJsonObject(jsonObj.getAsJsonObject("merchant"));
      }
      if (!jsonObj.get("expense_id").isJsonNull() && (jsonObj.get("expense_id") != null && !jsonObj.get("expense_id").isJsonNull()) && !jsonObj.get("expense_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expense_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expense_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<CardTransaction>() {
           @Override
           public void write(JsonWriter out, CardTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CardTransaction read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CardTransaction instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CardTransaction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CardTransaction
  * @throws IOException if the JSON string is invalid with respect to CardTransaction
  */
  public static CardTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardTransaction.class);
  }

 /**
  * Convert an instance of CardTransaction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

