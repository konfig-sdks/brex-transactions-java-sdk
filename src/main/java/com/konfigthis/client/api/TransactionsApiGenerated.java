/*
 * Transactions API
 *  The transactions API lets you view your transactions, accounts, and statements. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.PageCardTransaction;
import com.konfigthis.client.model.PageCashTransaction;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TransactionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listAllCardTransactionsCall(String cursor, Integer limit, List<String> userIds, OffsetDateTime postedAtStart, List<String> expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/transactions/card/primary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (userIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "user_ids", userIds));
        }

        if (postedAtStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("posted_at_start", postedAtStart));
        }

        if (expand != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "expand[]", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllCardTransactionsValidateBeforeCall(String cursor, Integer limit, List<String> userIds, OffsetDateTime postedAtStart, List<String> expand, final ApiCallback _callback) throws ApiException {
        return listAllCardTransactionsCall(cursor, limit, userIds, postedAtStart, expand, _callback);

    }


    private ApiResponse<PageCardTransaction> listAllCardTransactionsWithHttpInfo(String cursor, Integer limit, List<String> userIds, OffsetDateTime postedAtStart, List<String> expand) throws ApiException {
        okhttp3.Call localVarCall = listAllCardTransactionsValidateBeforeCall(cursor, limit, userIds, postedAtStart, expand, null);
        Type localVarReturnType = new TypeToken<PageCardTransaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllCardTransactionsAsync(String cursor, Integer limit, List<String> userIds, OffsetDateTime postedAtStart, List<String> expand, final ApiCallback<PageCardTransaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllCardTransactionsValidateBeforeCall(cursor, limit, userIds, postedAtStart, expand, _callback);
        Type localVarReturnType = new TypeToken<PageCardTransaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllCardTransactionsRequestBuilder {
        private String cursor;
        private Integer limit;
        private List<String> userIds;
        private OffsetDateTime postedAtStart;
        private List<String> expand;

        private ListAllCardTransactionsRequestBuilder() {
        }

        /**
         * Set cursor
         * @param cursor  (optional)
         * @return ListAllCardTransactionsRequestBuilder
         */
        public ListAllCardTransactionsRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional)
         * @return ListAllCardTransactionsRequestBuilder
         */
        public ListAllCardTransactionsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set userIds
         * @param userIds  (optional)
         * @return ListAllCardTransactionsRequestBuilder
         */
        public ListAllCardTransactionsRequestBuilder userIds(List<String> userIds) {
            this.userIds = userIds;
            return this;
        }
        
        /**
         * Set postedAtStart
         * @param postedAtStart  Shows only transactions with a &#x60;posted_at_date&#x60; on or after this date-time. This parameter is the date-time notation as defined by [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)  (optional)
         * @return ListAllCardTransactionsRequestBuilder
         */
        public ListAllCardTransactionsRequestBuilder postedAtStart(OffsetDateTime postedAtStart) {
            this.postedAtStart = postedAtStart;
            return this;
        }
        
        /**
         * Set expand
         * @param expand  (optional)
         * @return ListAllCardTransactionsRequestBuilder
         */
        public ListAllCardTransactionsRequestBuilder expand(List<String> expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for listAllCardTransactions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listPrimaryCardTransactions 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCardTransactionsCall(cursor, limit, userIds, postedAtStart, expand, _callback);
        }


        /**
         * Execute listAllCardTransactions request
         * @return PageCardTransaction
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listPrimaryCardTransactions 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public PageCardTransaction execute() throws ApiException {
            ApiResponse<PageCardTransaction> localVarResp = listAllCardTransactionsWithHttpInfo(cursor, limit, userIds, postedAtStart, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllCardTransactions request with HTTP info returned
         * @return ApiResponse&lt;PageCardTransaction&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listPrimaryCardTransactions 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageCardTransaction> executeWithHttpInfo() throws ApiException {
            return listAllCardTransactionsWithHttpInfo(cursor, limit, userIds, postedAtStart, expand);
        }

        /**
         * Execute listAllCardTransactions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listPrimaryCardTransactions 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageCardTransaction> _callback) throws ApiException {
            return listAllCardTransactionsAsync(cursor, limit, userIds, postedAtStart, expand, _callback);
        }
    }

    /**
     *  List transactions for all card accounts. 
     *  This endpoint lists all settled transactions for all card accounts. Regular users may only fetch their own \&quot;PURCHASE\&quot;,\&quot;REFUND\&quot; and \&quot;CHARGEBACK\&quot; settled transactions. 
     * @return ListAllCardTransactionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listPrimaryCardTransactions 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListAllCardTransactionsRequestBuilder listAllCardTransactions() throws IllegalArgumentException {
        return new ListAllCardTransactionsRequestBuilder();
    }
    private okhttp3.Call listByIdCall(String id, String cursor, Integer limit, OffsetDateTime postedAtStart, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/transactions/cash/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (postedAtStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("posted_at_start", postedAtStart));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByIdValidateBeforeCall(String id, String cursor, Integer limit, OffsetDateTime postedAtStart, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listById(Async)");
        }

        return listByIdCall(id, cursor, limit, postedAtStart, _callback);

    }


    private ApiResponse<PageCashTransaction> listByIdWithHttpInfo(String id, String cursor, Integer limit, OffsetDateTime postedAtStart) throws ApiException {
        okhttp3.Call localVarCall = listByIdValidateBeforeCall(id, cursor, limit, postedAtStart, null);
        Type localVarReturnType = new TypeToken<PageCashTransaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByIdAsync(String id, String cursor, Integer limit, OffsetDateTime postedAtStart, final ApiCallback<PageCashTransaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByIdValidateBeforeCall(id, cursor, limit, postedAtStart, _callback);
        Type localVarReturnType = new TypeToken<PageCashTransaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByIdRequestBuilder {
        private final String id;
        private String cursor;
        private Integer limit;
        private OffsetDateTime postedAtStart;

        private ListByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set cursor
         * @param cursor  (optional)
         * @return ListByIdRequestBuilder
         */
        public ListByIdRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional)
         * @return ListByIdRequestBuilder
         */
        public ListByIdRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set postedAtStart
         * @param postedAtStart  Shows only transactions with a &#x60;posted_at_date&#x60; on or after this date-time. This parameter is the date-time notation as defined by [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)  (optional)
         * @return ListByIdRequestBuilder
         */
        public ListByIdRequestBuilder postedAtStart(OffsetDateTime postedAtStart) {
            this.postedAtStart = postedAtStart;
            return this;
        }
        
        /**
         * Build call for listById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listCashTransactions 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByIdCall(id, cursor, limit, postedAtStart, _callback);
        }


        /**
         * Execute listById request
         * @return PageCashTransaction
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listCashTransactions 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public PageCashTransaction execute() throws ApiException {
            ApiResponse<PageCashTransaction> localVarResp = listByIdWithHttpInfo(id, cursor, limit, postedAtStart);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listById request with HTTP info returned
         * @return ApiResponse&lt;PageCashTransaction&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listCashTransactions 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageCashTransaction> executeWithHttpInfo() throws ApiException {
            return listByIdWithHttpInfo(id, cursor, limit, postedAtStart);
        }

        /**
         * Execute listById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listCashTransactions 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageCashTransaction> _callback) throws ApiException {
            return listByIdAsync(id, cursor, limit, postedAtStart, _callback);
        }
    }

    /**
     *  List transactions for the selected cash account. 
     *  This endpoint lists all transactions for the cash account with the selected ID. 
     * @param id  (required)
     * @return ListByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listCashTransactions 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListByIdRequestBuilder listById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ListByIdRequestBuilder(id);
    }
}
